



QUIC                                                          J. Iyengar
Internet-Draft                                                    Fastly
Intended status: Standards Track                                I. Swett
Expires: 11 July 2020                                             Google
                                                          8 January 2020


     A Generalized Mechanism for Delaying Acknowledgements in QUIC
                     draft-iyengar-quic-delayed-ack

Abstract

   This document describes a QUIC extension for an endpoint to influence
   its peer's delaying of acknowledgements.

Note to Readers

   Discussion of this draft takes place on the QUIC working group
   mailing list (quic@ietf.org), which is archived at
   <https://mailarchive.ietf.org/arch/search/?email_list=quic>.

   Working Group information can be found at <https://github.com/
   quicwg>; source code and issues list for this draft can be found at
   <https://github.com/quicwg/base-drafts/labels/-transport>.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 11 July 2020.

Copyright Notice

   Copyright (c) 2020 IETF Trust and the persons identified as the
   document authors.  All rights reserved.





Iyengar & Swett           Expires 11 July 2020                  [Page 1]

Internet-Draft       Delaying QUIC Acknowledgements         January 2020


   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Simplified BSD License text
   as described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Terms and Definitions . . . . . . . . . . . . . . . . . .   2
   2.  Motivation  . . . . . . . . . . . . . . . . . . . . . . . . .   3
   3.  ACK-FREQUENCY Frame . . . . . . . . . . . . . . . . . . . . .   4
   4.  Sending Acknowledgments . . . . . . . . . . . . . . . . . . .   5
     4.1.  Expediting Loss and Congestion Signals  . . . . . . . . .   5
     4.2.  Batch Processing of Packets . . . . . . . . . . . . . . .   6
   5.  Multiple ACK-FREQUENCY Frames . . . . . . . . . . . . . . . .   6
   6.  Security Considerations . . . . . . . . . . . . . . . . . . .   6
   7.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .   6
   8.  Normative References  . . . . . . . . . . . . . . . . . . . .   6
   Appendix A.  Change Log . . . . . . . . . . . . . . . . . . . . .   7
   Acknowledgments . . . . . . . . . . . . . . . . . . . . . . . . .   7
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .   7

1.  Introduction

   This document describes a QUIC extension for an endpoint to influence
   its peer's delaying of acknowledgements.

1.1.  Terms and Definitions

   The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in BCP
   14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

   In the rest of this document, "sender" refers to a QUIC data sender
   (and acknowledgement receiver).  Similarly, "receiver" refers to a
   QUIC data receiver (and acknowledgement sender).

   An "acknowledgement packet" refers to a QUIC packet that contains
   only an ACK frame.

   This document uses terms, definitions, and notational conventions




Iyengar & Swett           Expires 11 July 2020                  [Page 2]

Internet-Draft       Delaying QUIC Acknowledgements         January 2020


   described in Section XX of [QUIC-TRANSPORT].  Frame diagrams in this
   document use the format described in Section XX of [QUIC-TRANSPORT].

2.  Motivation

   A receiver acknowledges received packets, but it can delay sending
   these acknowledgements.  The delaying of acknowledgements can impact
   connection throughput, loss detection and congestion controller
   performance at a data sender, and CPU utilization at both a data
   sender and a data receiver.

   Reducing the frequency of acknowledgement packets can improve
   connection and endpoint performance in the following ways:

   *  Sending UDP packets can be noticeably CPU intensive on some
      platforms.  Reducing the number of packets that only contain
      acknowledgements can therefore reduce the amount of CPU consumed
      at a data receiver.  Experience shows that this cost reduction can
      be significant for high bandwidth connections.

   *  Similarly, receiving UDP packets can also be CPU intensive, and
      reducing acknowledgement frequency reduces this cost at a data
      sender.

   *  Severely asymmetric link technologies, such as DOCSIS, LTE, and
      satellite links, connection throughput in the data direction
      becomes constrained when the reverse bandwidth is filled by
      acknowledgment packets.  When traversing such links, reducing the
      number of acknowledgments allows connection throughput to scale
      much further.

   Unfortunately, there are undesirable consequences to simply reducing
   the acknowledgement frequency, especially to an arbitrary fixed
   value, as follows:

   *  A sender relies on receipt of acknowledgements to determine the
      amount of data in flight and to detect losses, see
      [QUIC-RECOVERY].  Consequently, how often a receiver sends
      acknowledgments dictates how long it takes for losses to be
      detected at the sender.

   *  Starting a connection up quickly without inducing much queue is
      important for latency reduction, for both short and long flows.
      The sender often needs frequent acknowledgments during this phase;
      see slow start and hystart.

   *  Congestion controllers that are purely window based and strictly
      adherent to packet conservation, such as the one defined in



Iyengar & Swett           Expires 11 July 2020                  [Page 3]

Internet-Draft       Delaying QUIC Acknowledgements         January 2020


      [QUIC-RECOVERY], rely on receipt of acknowledgments to move the
      congestion window forward and release additional data.  Such
      controllers suffer performance penalties when acknowledgements are
      not sent frequently enough.  On the other hand, for long-running
      flows, congestion controllers that are not window-based, such as
      BBR, can perform well with very few acknowledgements per RTT.

   *  New sender startup mechanisms, such as paced chirping, and
      congestion controllers will need a way for the sender to increase
      the frequency of acknowledgements when fine-grained feedback is
      required.

   [QUIC-TRANSPORT] currently specifies a simple delayed acknowledgement
   mechanism that a receiver can use: send an acknowledgement for every
   other packet, and for every packet (for a short while) when
   reordering is observed.  This simple mechanism does not allow a
   sender to signal its constraints, which in turn limits what a
   receiver can do to delay acknowledgements and reduce acknowledgement
   frequency.  This extension provides a mechanism to solve this
   problem.

3.  ACK-FREQUENCY Frame

   Delaying acknowledgements as much as possible reduces both work done
   by the endpoints and network load.  An endpoint's loss detection and
   congestion control mechanisms however need to be tolerant of this
   delay at the peer.  An endpoint signals its tolerance to its peer
   using an ACK-FREQUENCY frame, shown below:

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                     [Packet Tolerance (i)]                  ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                      [Time Tolerance (i)]                   ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

   ACK-FREQUENCY frames have a type of 0xXX, and contain the following
   fields:

   Packet Tolerance:  An optional variable-length integer representing
      the maximum number of ack-eliciting packets after which the
      receiver sends an acknowledgement.

   Time Tolerance:  An optional variable-length integer representing the
      maximum amount of time, in microseconds, after which the receiver
      sends an acknowledgement.  The value of the Time Tolerance field
      is scaled by multiplying the encoded value by 2 to the power of



Iyengar & Swett           Expires 11 July 2020                  [Page 4]

Internet-Draft       Delaying QUIC Acknowledgements         January 2020


      the value of the "ack_delay_exponent" transport parameter set by
      the sender of the ACK-FREQUENCY frame (see Section XX in
      [QUIC-TRANSPORT]).  Scaling in this fashion allows for a larger
      range of values with a shorter encoding at the cost of lower
      resolution.

   ACK-FREQUENCY frames are ack-eliciting.  However, their loss does not
   require retransmission.

   An endpoint MUST NOT send an empty ACK-FREQUENCY frame.  Endpoints
   MUST treat receipt of an empty ACK-FREQUENCY frame as a connection
   error of type PROTOCOL_VIOLATION.

   An endpoint MAY send ACK-FREQUENCY frames multiple times during a
   connection and with different values.

4.  Sending Acknowledgments

   An endpoint could receive an ACK-FREQUENCY frame with either or both
   Time Tolerance and Packet Tolerance values specified.  In addition,
   the endpoint will have committed a max_ack_delay value to the peer,
   which specifies the maximum amount of time by which the endpoint will
   delay sending acknowledgments; see Section XX of [QUIC-TRANSPORT].

   The endpoint MUST send an acknowledgement when any of the three
   thresholds are met.  Doing so results in the fewest acknowledgements
   possible within the sender's tolerance and honors the receiver's
   commitment.  Section 4.1 and Section 4.2 section describes exceptions
   to this strategy.

   An endpoint is expected to bundle acknowledgements when possible.
   Every time an acknowledgement is sent, bundled or otherwise, all
   counters and timers related to delaying of acknowledgments are reset.

4.1.  Expediting Loss and Congestion Signals

   To expedite loss detection, endpoints SHOULD send an acknowledgement
   immediately on receiving an ack-eliciting packet that is out of
   order.  Endpoints MAY continue sending acknowledgements immediately
   on each subsequently received packet, but they SHOULD return to using
   delay thresholds as specified above within a period of 1/8 x RTT,
   unless more ack-eliciting packets are received out of order.

   Similarly, packets marked with the ECN Congestion Experienced (CE)
   codepoint in the IP header SHOULD be acknowledged immediately, to
   reduce the peer's response time to congestion events.





Iyengar & Swett           Expires 11 July 2020                  [Page 5]

Internet-Draft       Delaying QUIC Acknowledgements         January 2020


4.2.  Batch Processing of Packets

   For performance reasons, an endpoint can receive incoming packets
   from the underlying platform in a batch of multiple packets.  This
   batch can contain enough packets to cause multiple acknowledgements
   to be sent.

   To avoid sending multiple acknowledgements in rapid succession, an
   endpoint MAY process all packets in a batch before determining
   whether a threshold has been met and an acknowledgement is to be sent
   in response.

5.  Multiple ACK-FREQUENCY Frames

   An endpoint can send multiple ACK-FREQUENCY frames, and each one of
   them can have different values.

   If a received ACK-FREQUENCY frame is the first one in this
   connection, the endpoint MUST immediately record any values from the
   frame and start using them.  The endpoint MUST also record the packet
   number of the enclosing packet.

   If a received ACK-FREQUENCY frame is not the first one in this
   connection, the endpoint MUST check if this is a more recent ACK-
   FREQUENCY frame than any previous ones, as follows:

   *  If the enclosing packet number is greater than the recorded one,
      the endpoint MUST immediately replace old recorded state with
      values received in this frame.  The endpoint MUST also replace the
      value of the recorded packet number with that of the enclosing
      packet.

   *  If the enclosing packet number is not greater than the recorded
      one, the endpoint MUST ignore this ACK-FREQUENCY frame.

6.  Security Considerations

   TBD.

7.  IANA Considerations

   TBD.

8.  Normative References

   [QUIC-RECOVERY]
              Iyengar, J., Ed. and I. Swett, Ed., "QUIC Loss Detection
              and Congestion Control", Work in Progress, Internet-Draft,



Iyengar & Swett           Expires 11 July 2020                  [Page 6]

Internet-Draft       Delaying QUIC Acknowledgements         January 2020


              draft-ietf-quic-recovery-latest,
              <https://tools.ietf.org/html/draft-ietf-quic-recovery-
              latest>.

   [QUIC-TRANSPORT]
              Iyengar, J., Ed. and M. Thomson, Ed., "QUIC: A UDP-Based
              Multiplexed and Secure Transport", Work in Progress,
              Internet-Draft, draft-ietf-quic-transport-latest,
              <https://tools.ietf.org/html/draft-ietf-quic-transport-
              latest>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/info/rfc8174>.

Appendix A.  Change Log

      *RFC Editor's Note:* Please remove this section prior to
      publication of a final version of this document.

Acknowledgments

   Thanks to all the people.

Authors' Addresses

   Jana Iyengar
   Fastly

   Email: jri.ietf@gmail.com


   Ian Swett
   Google

   Email: ian.swett@google.com










Iyengar & Swett           Expires 11 July 2020                  [Page 7]
